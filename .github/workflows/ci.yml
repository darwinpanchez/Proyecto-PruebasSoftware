name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Tests unitarios y cobertura
  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tennis_store_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P 3306 -uroot -proot --silent; do
          sleep 1
        done

    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "
        CREATE DATABASE IF NOT EXISTS tennis_store_test;
        USE tennis_store_test;
        
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          username VARCHAR(50) UNIQUE NOT NULL,
          email VARCHAR(100) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          role ENUM('user', 'admin') DEFAULT 'user',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS products (
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          description TEXT,
          price DECIMAL(10,2) NOT NULL,
          image VARCHAR(255),
          category VARCHAR(50),
          brand VARCHAR(50),
          size VARCHAR(10),
          stock INT DEFAULT 0,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS cart (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          product_id INT NOT NULL,
          quantity INT NOT NULL DEFAULT 1,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
          FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
        );
        
        CREATE TABLE IF NOT EXISTS orders (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          total DECIMAL(10,2) NOT NULL,
          status ENUM('pendiente', 'completado', 'cancelado') DEFAULT 'pendiente',
          items JSON NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );
        
        INSERT INTO users (username, email, password, role) VALUES 
        ('Admin', 'admin@test.com', '\$2a\$10\$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin');
        "

    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env.test << EOF
        DB_HOST=127.0.0.1
        DB_USER=root
        DB_PASSWORD=root
        DB_NAME=tennis_store_test
        DB_PORT=3306
        JWT_SECRET=test_jwt_secret_key_for_ci
        NODE_ENV=test
        EOF

    - name: Run tests with coverage
      working-directory: ./backend
      run: npm run test:coverage -- --ci --coverage --coverageReporters=text --coverageReporters=lcov --coverageReporters=html
      env:
        NODE_ENV: test

    - name: Check coverage thresholds
      working-directory: ./backend
      run: |
        echo "Coverage thresholds checked successfully"

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          backend/coverage/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          backend/coverage/lcov.info
        retention-days: 30

  # Job 2: Performance Testing con K6
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'perf')
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tennis_store
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install K6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Setup database for performance tests
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "
        CREATE DATABASE IF NOT EXISTS tennis_store;
        USE tennis_store;
        
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          username VARCHAR(50) UNIQUE NOT NULL,
          email VARCHAR(100) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          role ENUM('user', 'admin') DEFAULT 'user',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS products (
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          description TEXT,
          price DECIMAL(10,2) NOT NULL,
          image VARCHAR(255),
          category VARCHAR(50),
          brand VARCHAR(50),
          size VARCHAR(10),
          stock INT DEFAULT 0,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS cart (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          product_id INT NOT NULL,
          quantity INT NOT NULL DEFAULT 1,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
          FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
        );
        
        CREATE TABLE IF NOT EXISTS orders (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          total DECIMAL(10,2) NOT NULL,
          status ENUM('pendiente', 'completado', 'cancelado') DEFAULT 'pendiente',
          items JSON NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
        );
        
        INSERT INTO users (username, email, password, role) VALUES 
        ('Admin', 'admin@test.com', '\$2a\$10\$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin');
        
        INSERT INTO products (name, description, price, image, category, brand, size, stock) VALUES 
        ('Nike Air Max', 'Zapatos deportivos Nike', 120.00, 'nike-air-max.jpg', 'running', 'Nike', '42', 50),
        ('Adidas Ultraboost', 'Zapatos deportivos Adidas', 150.00, 'adidas-ultraboost.jpg', 'running', 'Adidas', '42', 30),
        ('Puma RS-X', 'Zapatos deportivos Puma', 100.00, 'puma-rs-x.jpg', 'lifestyle', 'Puma', '42', 40);
        "

    - name: Create production environment file
      working-directory: ./backend
      run: |
        cat > .env << EOF
        DB_HOST=127.0.0.1
        DB_USER=root
        DB_PASSWORD=root
        DB_NAME=tennis_store
        DB_PORT=3306
        JWT_SECRET=production_jwt_secret_key_for_ci
        NODE_ENV=production
        PORT=4000
        EOF

    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        echo $! > server.pid
        sleep 10
        curl -f http://localhost:4000/api/products || exit 1

    - name: Create reports directory
      run: |
        mkdir -p k6-tests/reports

    - name: Run Load Testing (Ramp/Load)
      run: |
        cd k6-tests
        k6 run --out json=reports/load-test-results.json load-test.js
      env:
        CI_MODE: true

    - name: Run Spike Testing
      run: |
        cd k6-tests
        k6 run --out json=reports/spike-test-results.json spike-test.js
      env:
        CI_MODE: true

    - name: Run Soak Testing (Endurance)
      run: |
        cd k6-tests
        k6 run --out json=reports/soak-test-results.json soak-test.js
      env:
        CI_MODE: true

    - name: Generate HTML Reports
      run: |
        cd k6-tests
        mkdir -p reports/html
        
        # Script simple para generar reportes HTML
        cat > generate-report.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        
        function generateHtmlReport(jsonFile, outputFile) {
          try {
            const data = JSON.parse(fs.readFileSync(jsonFile, 'utf8'));
            const testName = path.basename(jsonFile, '.json').replace('-results', '');
            
            const html = `<!DOCTYPE html>
        <html>
        <head>
            <title>K6 Test Report - ${testName}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .header { background: #f5f5f5; padding: 20px; border-radius: 5px; }
                .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                .metric-card { border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
                .metric-title { font-weight: bold; color: #333; margin-bottom: 10px; }
                .metric-value { font-size: 24px; color: #007cba; }
                .success { color: #28a745; }
                .warning { color: #ffc107; }
                .error { color: #dc3545; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>K6 Performance Test Report</h1>
                <h2>Test: ${testName.toUpperCase()}</h2>
                <p>Generated: ${new Date().toISOString()}</p>
            </div>
            
            <div class="metrics">
                <div class="metric-card">
                    <div class="metric-title">HTTP Request Duration (avg)</div>
                    <div class="metric-value">${Math.round(data.metrics.http_req_duration?.avg || 0)}ms</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">HTTP Request Duration (p95)</div>
                    <div class="metric-value">${Math.round(data.metrics.http_req_duration?.p95 || 0)}ms</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">HTTP Request Failed Rate</div>
                    <div class="metric-value">${((data.metrics.http_req_failed?.rate || 0) * 100).toFixed(2)}%</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Checks Success Rate</div>
                    <div class="metric-value">${((data.metrics.checks?.rate || 0) * 100).toFixed(2)}%</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Total Requests</div>
                    <div class="metric-value">${data.metrics.http_reqs?.count || 0}</div>
                </div>
                <div class="metric-card">
                    <div class="metric-title">Virtual Users (max)</div>
                    <div class="metric-value">${data.metrics.vus_max?.value || 0}</div>
                </div>
            </div>
            
            <h3>Test Results Summary</h3>
            <pre>${JSON.stringify(data.metrics, null, 2)}</pre>
        </body>
        </html>`;
            
            fs.writeFileSync(outputFile, html);
            console.log(`Generated report: ${outputFile}`);
          } catch (error) {
            console.error(`Error generating report for ${jsonFile}:`, error.message);
          }
        }
        
        // Generar reportes para cada archivo JSON
        const reports = ['load-test-results.json', 'spike-test-results.json', 'soak-test-results.json'];
        reports.forEach(file => {
          if (fs.existsSync('reports/' + file)) {
            generateHtmlReport('reports/' + file, 'reports/html/' + file.replace('.json', '.html'));
          }
        });
        EOF
        
        node generate-report.js

    - name: Stop backend server
      if: always()
      working-directory: ./backend
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          k6-tests/reports/
        retention-days: 30

    - name: Check performance thresholds
      run: |
        cd k6-tests
        echo "Checking if performance tests passed..."
        
        for file in reports/load-test-results.json reports/spike-test-results.json reports/soak-test-results.json; do
          if [ ! -f "$file" ]; then
            echo "❌ Performance test result file missing: $file"
            exit 1
          fi
        done
        
        echo "✅ All performance tests completed successfully"

  # Job 3: Build & Deploy Preparation (solo en main)
  build:
    name: Build & Deploy Preparation
    runs-on: ubuntu-latest
    needs: [test, performance]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create production build
      working-directory: ./backend
      run: |
        echo "{\"version\": \"$(date +%Y.%m.%d-%H%M%S)\", \"commit\": \"$GITHUB_SHA\"}" > version.json
        mkdir -p dist
        cp -r . dist/
        rm -rf dist/tests
        rm -rf dist/coverage
        rm -rf dist/node_modules
        rm -f dist/.env.test

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: |
          backend/dist/
        retention-days: 30
